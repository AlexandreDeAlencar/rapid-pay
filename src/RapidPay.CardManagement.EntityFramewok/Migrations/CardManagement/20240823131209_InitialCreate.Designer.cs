// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RapidPay.CardManagement.EntityFramework.Contexts;

#nullable disable

namespace RapidPay.CardManagement.EntityFramework.Migrations.CardManagement
{
    [DbContext(typeof(CardManagementContext))]
    [Migration("20240823131209_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RapidPay.CardManagement.Domain.Cards.Models.Card", b =>
                {
                    b.Property<Guid>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cardid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cardnumber");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createddate");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expirationdate");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastupdateddate");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("CardId");

                    b.ToTable("cards", "public");
                });

            modelBuilder.Entity("RapidPay.CardManagement.Domain.Cards.Models.Card", b =>
                {
                    b.OwnsMany("RapidPay.CardManagement.Domain.Cards.Models.CardTransaction", "Transactions", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("transactionid");

                            b1.Property<Guid>("CardId")
                                .HasColumnType("uuid")
                                .HasColumnName("cardid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("amount");

                            b1.Property<decimal>("FeeApplied")
                                .HasColumnType("numeric")
                                .HasColumnName("feeapplied");

                            b1.Property<DateTime>("TransactionDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("transactiondate");

                            b1.HasKey("TransactionId", "CardId");

                            b1.HasIndex("CardId");

                            b1.ToTable("transactions", "public");

                            b1.WithOwner()
                                .HasForeignKey("CardId");
                        });

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
